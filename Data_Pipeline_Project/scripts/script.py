# -*- coding: utf-8 -*-
"""script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvx-BKEfsyVAyDhXmtLCgnlkuxLXY4u7
"""

!pip install pyspark

from pyspark.sql import SparkSession
from pyspark.sql.functions import countDistinct, count, when, col, collect_list, year, month, dayofmonth
import matplotlib.pyplot as plt

# Get or create a Spark session
spark = SparkSession.builder.appName("MyApp").getOrCreate()

# Importing the data
df = spark.read.csv("./../Data_Pipeline_Project/data/mergedData", header=True, inferSchema=True, sep=';')

# First task of cleaning is dropping the duplicates
df = df.dropDuplicates()

# Changing the values in Civilité from .M to H and from Mee. to F
df = df.withColumn('Civilité', when(df['Civilité'] == 'M.', 'H').otherwise('F'))

# Counting unique values per column
for column in df.columns:
    count_unique = df.select(column).agg(countDistinct(column)).collect()[0][0]
    print(f"Number of unique values in column '{column}': {count_unique}")

# No typos detected. We can preserve the data at this state.
# We notice that all data was generated at either 03/2022 or 02/2022, which means no need to keep the year in the date
df = df.withColumn("Month", month(col("Date de publication"))).withColumn("day", dayofmonth(col("Date de publication")))
df = df.drop('Date de publication')

# Saving the processed data in a file as processedData
df.write.csv("./../DataPipeline/data merged/processedData", header=True, mode='overwrite')

# This part is all about creating some aggregations and then to use them for plots
# We will start by grouping the votes by candidate
vote_per_candidat = df.groupBy("Candidat").agg(count("*").alias("Nombre_de_votes")).orderBy("Nombre_de_votes", ascending=False)

# And then by grouping the votes by candidate by sex
vote_per_candidat_per_genre = df.groupBy("Candidat", "Civilité").agg(count("*").alias("Nombre_de_votes")).orderBy("Candidat", ascending=False)
vote_per_candidat_per_genre = vote_per_candidat_per_genre.filter("Nombre_de_votes >= 200")

vote_per_candidat = vote_per_candidat.toPandas()
vote_per_candidat_per_genre = vote_per_candidat_per_genre.toPandas()

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))
hommes = vote_per_candidat_per_genre[vote_per_candidat_per_genre['Civilité'] == 'H']
femmes = vote_per_candidat_per_genre[vote_per_candidat_per_genre['Civilité'] == 'F']
ax.barh(hommes['Candidat'], hommes['Nombre_de_votes'], label='Hommes', color='blue')
ax.barh(femmes['Candidat'], femmes['Nombre_de_votes'], label='Femmes', color='pink')
ax.set_xlabel('Candidat')
ax.set_ylabel('Nombre de votes')
ax.set_title('Nombre de votes par candidat et par genre')
ax.legend()
plt.show()

fig, ax = plt.subplots(figsize=(8, 8))
ax.pie(vote_per_candidat['Nombre_de_votes'], labels=vote_per_candidat['Candidat'], counterclock=False)
ax.set_title('Répartition des votes par candidat')
plt.show()

# Group by department and count the number of votes
votes_by_department = df.groupBy("Département").agg(count("*").alias("Nombre_de_votes")).orderBy("Nombre_de_votes", ascending=False).toPandas()

# Plotting
fig, ax = plt.subplots(figsize=(12, 8))
ax.bar(votes_by_department['Département'], votes_by_department['Nombre_de_votes'], color='skyblue')
ax.set_xlabel('Département')
ax.set_ylabel('Nombre de votes')
ax.set_title('Nombre de votes par département')
plt.xticks(rotation=90)
plt.show()

# Group by month and count the number of votes
votes_by_month = df.groupBy("Month").agg(count("*").alias("Nombre_de_votes")).orderBy("Month").toPandas()

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))
ax.bar(votes_by_month['Month'], votes_by_month['Nombre_de_votes'], color='lightgreen')
ax.set_xlabel('Mois')
ax.set_ylabel('Nombre de votes')
ax.set_title('Distribution des votes par mois')
plt.xticks(rotation=0)
plt.show()

# Calculate average votes per candidate
avg_votes_per_candidate = df.groupBy("Candidat").agg({"*": "count"}).orderBy("count(1)", ascending=False).toPandas()

# Plotting
fig, ax = plt.subplots(figsize=(12, 8))
ax.bar(avg_votes_per_candidate['Candidat'], avg_votes_per_candidate['count(1)'], color='orange')
ax.set_xlabel('Candidat')
ax.set_ylabel('Nombre moyen de votes')
ax.set_title('Nombre moyen de votes par candidat')
plt.xticks(rotation=90)
plt.show()